#!/usr/bin/env python

"""
Script to update BGP entries in IRRExplorer database.
"""

import time
import argparse
import urllib2

from irrexplorer import sqldb


DEFAULT_SOURCE      = 'http://lg01.infra.ring.nlnog.net/table.txt'
DEFAULT_DATABASE    = 'irrexplorer'
DEFAULT_INTERVAL    = 300

INSERT_STM = "SELECT create_route (%s, %s, 'bgp');"
DELETE_STM = "DELETE FROM routes USING sources WHERE routes.route = %s AND routes.asn = %s AND routes.source_id = sources.id AND sources.name = 'bgp';"



def create_parser():

    parser = argparse.ArgumentParser(description='Continously update BGP table in IRRExplorer database')
    parser.add_argument('-s', '--source', dest='source', default=DEFAULT_SOURCE, help='Source URL for BGP routing table (default: nlnog ring table)')
    parser.add_argument('-d', '--database', dest='database', default=DEFAULT_DATABASE, help='IRRExplorer database name (default: %s)' % DEFAULT_DATABASE)
    parser.add_argument('-i', '---interval', dest='interval', default=DEFAULT_INTERVAL, help='Interval between updates (default: %i seconds)' % DEFAULT_INTERVAL)
    return parser


def main():

    parser = create_parser()
    args = parser.parse_args()

    dsn = 'dbname=%s' % args.database
    db = sqldb.IRRSQLDatabase(dsn)

    while True:

        # first get the bgp routes
        source_routes = set()
        for line in urllib2.urlopen(args.source):
            route, asn = line.strip().split(' ')
            source_routes.add( (route, int(asn)) )

        print 'BGP table fetched and table build, routes:', (len(source_routes))

        # then the database routes
        db_routes = set()
        bgp_rows = db.query_source('bgp')
        print 'Got database entries, routes:', len(bgp_rows)

        for route, asn in bgp_rows:
            db_routes.add( (route, int(asn)) )

        # calculate the diff, intersection is just for logging
        routes_is = source_routes & db_routes
        print 'Unchanged routes: %i' % len(routes_is)

        deprecated_routes = db_routes - source_routes
        print 'Deprecated routes:', len(deprecated_routes)

        new_routes = source_routes - db_routes
        print 'New routes:', len(new_routes)

        # create + send update statements
        cur = db._get_cursor()

        for route, asn in deprecated_routes:
            cur.execute(DELETE_STM, (route, asn) )

        for route, asn in new_routes:
            cur.execute(INSERT_STM, (route, asn) )

        db.conn.commit()
        cur.close() # so it doesn't linger while sleeping

        print 'Commit done and cursor closed'
        print 'Sleeping for %i seconds' % args.interval
        time.sleep(args.interval)
        print


if __name__ == '__main__':
    main()

